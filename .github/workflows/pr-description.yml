name: Auto PR Description

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write
  contents: read

concurrency:
  group: pr-description-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  update-pr-description:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files_separator: ","

      - name: Generate PR description
        id: generate-description
        run: |
          echo "🤖 **Auto-generated PR Summary**" > pr_description.md
          echo "" >> pr_description.md

          # Get commit messages since base branch
          echo "## 📝 Changes Summary" >> pr_description.md
          git log --oneline --no-merges origin/${{ github.base_ref }}..${{ github.sha }} >> commits.tmp

          if [ -s commits.tmp ]; then
            echo "" >> pr_description.md
            echo "### Recent Commits:" >> pr_description.md
            while read line; do
              echo "- $line" >> pr_description.md
            done < commits.tmp
            echo "" >> pr_description.md
          fi

          # Changed files analysis
          echo "## 📁 Files Changed" >> pr_description.md
          echo "" >> pr_description.md

          # Count file types
          js_ts_count=0
          test_count=0
          config_count=0
          doc_count=0
          other_count=0

          IFS=',' read -ra FILES <<< "${{ steps.changed-files.outputs.all_changed_files }}"

          # Debug: Show all files being processed
          echo "Debug - Processing files:"
          for file in "${FILES[@]}"; do
            echo "  - $file"
          done
          for file in "${FILES[@]}"; do
            if [[ $file == tests/* || $file == *test.* || $file == *spec.* ]]; then
              test_count=$((test_count + 1))
            elif [[ $file == *.md ]]; then
              doc_count=$((doc_count + 1))
            elif [[ $file == *.ts || $file == *.tsx || $file == *.js || $file == *.jsx ]]; then
              js_ts_count=$((js_ts_count + 1))
            elif [[ $file == *.json || $file == *.yml || $file == *.yaml || $file == *config* || $file == *.lock ]]; then
              config_count=$((config_count + 1))
            else
              other_count=$((other_count + 1))
            fi
          done

          total_files=${{ steps.changed-files.outputs.all_changed_files_count }}
          echo "**Total files changed: $total_files**" >> pr_description.md
          echo "" >> pr_description.md

          if [ $js_ts_count -gt 0 ]; then
            echo "- 🔧 **Source Code**: $js_ts_count files" >> pr_description.md
          fi
          if [ $test_count -gt 0 ]; then
            echo "- 🧪 **Tests**: $test_count files" >> pr_description.md
          fi
          if [ $config_count -gt 0 ]; then
            echo "- ⚙️ **Configuration**: $config_count files" >> pr_description.md
          fi
          if [ $doc_count -gt 0 ]; then
            echo "- 📚 **Documentation**: $doc_count files" >> pr_description.md
          fi
          if [ $other_count -gt 0 ]; then
            echo "- 📄 **Other**: $other_count files" >> pr_description.md
          fi
          echo "" >> pr_description.md

          # Detailed file list - カテゴリ別に整理
          echo "<details>" >> pr_description.md
          echo "<summary>📋 Detailed File List</summary>" >> pr_description.md
          echo "" >> pr_description.md

          # ファイルをカテゴリ別に分類
          source_files=()
          test_files=()
          config_files=()
          doc_files=()
          other_files=()

          for file in "${FILES[@]}"; do
            if [[ $file == tests/* || $file == *test.* || $file == *spec.* ]]; then
              test_files+=("$file")
            elif [[ $file == *.md ]]; then
              doc_files+=("$file")
            elif [[ $file == *.ts || $file == *.tsx || $file == *.js || $file == *.jsx ]]; then
              source_files+=("$file")
            elif [[ $file == *.json || $file == *.yml || $file == *.yaml || $file == *config* || $file == *.lock ]]; then
              config_files+=("$file")
            else
              other_files+=("$file")
            fi
          done

          # カテゴリ別に表示
          if [ ${#source_files[@]} -gt 0 ]; then
            echo "#### 🔧 Source Code" >> pr_description.md
            echo "" >> pr_description.md
            for file in "${source_files[@]}"; do
              echo "- \`$file\`" >> pr_description.md
            done
            echo "" >> pr_description.md
          fi

          if [ ${#test_files[@]} -gt 0 ]; then
            echo "#### 🧪 Tests" >> pr_description.md
            echo "" >> pr_description.md
            for file in "${test_files[@]}"; do
              echo "- \`$file\`" >> pr_description.md
            done
            echo "" >> pr_description.md
          fi

          if [ ${#config_files[@]} -gt 0 ]; then
            echo "#### ⚙️ Configuration" >> pr_description.md
            echo "" >> pr_description.md
            for file in "${config_files[@]}"; do
              echo "- \`$file\`" >> pr_description.md
            done
            echo "" >> pr_description.md
          fi

          if [ ${#doc_files[@]} -gt 0 ]; then
            echo "#### 📚 Documentation" >> pr_description.md
            echo "" >> pr_description.md
            for file in "${doc_files[@]}"; do
              echo "- \`$file\`" >> pr_description.md
            done
            echo "" >> pr_description.md
          fi

          if [ ${#other_files[@]} -gt 0 ]; then
            echo "#### 📄 Other Files" >> pr_description.md
            echo "" >> pr_description.md
            for file in "${other_files[@]}"; do
              echo "- \`$file\`" >> pr_description.md
            done
            echo "" >> pr_description.md
          fi

          echo "</details>" >> pr_description.md
          echo "" >> pr_description.md

          # Add change type classification
          echo "## 🏷️ Change Type" >> pr_description.md
          echo "" >> pr_description.md

          if [ $js_ts_count -gt 0 ]; then
            if echo "$ts_js_files" | grep -q "test\\|spec"; then
              echo "- 🧪 **Tests** - Test files modified/added" >> pr_description.md
            fi
            if echo "$ts_js_files" | grep -q "src/lib/gameLogic.ts\\|src/lib/scoring.ts"; then
              echo "- 🎮 **Game Logic** - Core game functionality updated" >> pr_description.md
            fi
            if echo "$ts_js_files" | grep -q "component\\|ui\\|page"; then
              echo "- 💄 **UI/UX** - User interface improvements" >> pr_description.md
            fi
          fi

          if [ $config_count -gt 0 ]; then
            echo "- ⚙️ **Configuration** - Build/tool configuration changes" >> pr_description.md
          fi
          if [ $doc_count -gt 0 ]; then
            echo "- 📝 **Documentation** - Documentation updates" >> pr_description.md
          fi
          echo "" >> pr_description.md

          # Add quality check reminder
          echo "## ✅ Review Checklist" >> pr_description.md
          echo "" >> pr_description.md
          echo "- [ ] Code follows project conventions (Biome linting)" >> pr_description.md
          echo "- [ ] TypeScript types are properly defined" >> pr_description.md
          echo "- [ ] Tests are added/updated for new functionality" >> pr_description.md
          echo "- [ ] Documentation is updated if necessary" >> pr_description.md
          echo "- [ ] All CI checks pass" >> pr_description.md
          echo "- [ ] Breaking changes are documented" >> pr_description.md
          echo "" >> pr_description.md

          # Add testing instructions
          if [ $test_count -gt 0 ]; then
            echo "## 🧪 Testing" >> pr_description.md
            echo "" >> pr_description.md
            echo "Tests have been modified/added. Run the test suite:" >> pr_description.md
            echo "" >> pr_description.md
            echo "\`\`\`bash" >> pr_description.md
            echo "npm test" >> pr_description.md
            echo "npm run test:coverage" >> pr_description.md
            echo "\`\`\`" >> pr_description.md
            echo "" >> pr_description.md
          fi

          if [ $js_ts_count -gt 0 ]; then
            echo "## 🚀 Local Testing" >> pr_description.md
            echo "" >> pr_description.md
            echo "To test these changes locally:" >> pr_description.md
            echo "" >> pr_description.md
            echo "\`\`\`bash" >> pr_description.md
            echo "git checkout ${{ github.head_ref }}" >> pr_description.md
            echo "npm install" >> pr_description.md
            echo "npm run dev" >> pr_description.md
            echo "# Visit http://localhost:3000" >> pr_description.md
            echo "\`\`\`" >> pr_description.md
            echo "" >> pr_description.md
          fi

          echo "---" >> pr_description.md
          echo "" >> pr_description.md
          echo "*🤖 This description was automatically generated from code changes*" >> pr_description.md

          # Set output for next step - proper JSON escaping
          {
            echo 'pr_body<<EOF'
            cat pr_description.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Update PR description
        uses: actions/github-script@v7
        env:
          PR_BODY: ${{ steps.generate-description.outputs.pr_body }}
        with:
          script: |
            const prBody = process.env.PR_BODY;

            // Get current PR
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            // Check if PR already has auto-generated content
            const hasAutoContent = pr.body && pr.body.includes('🤖 This description was automatically generated');

            let newBody;
            if (hasAutoContent) {
              // Replace existing auto-generated content
              const userContent = pr.body.split('🤖 **Auto-generated PR Summary**')[0].trim();
              newBody = userContent ? `${userContent}\n\n${prBody}` : prBody;
            } else {
              // Append to existing description
              newBody = pr.body ? `${pr.body}\n\n${prBody}` : prBody;
            }

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: newBody
            });

            console.log('PR description updated successfully!');

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.14.0'
        registry-url: 'https://registry.npmjs.org'

    - name: Get npm cache directory
      id: npm-cache-dir
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies (robust)
      run: |
        echo "üì¶ Installing dependencies with fallback strategies..."
        
        # Strategy 1: Try npm ci with cache
        if npm ci --prefer-offline --no-audit --no-fund; then
          echo "‚úÖ npm ci with cache successful"
        # Strategy 2: Try npm ci without offline
        elif npm ci --no-audit --no-fund; then
          echo "‚úÖ npm ci without offline successful"  
        # Strategy 3: Try with yarn as fallback
        elif command -v yarn >/dev/null && yarn install --frozen-lockfile --silent; then
          echo "‚úÖ yarn install successful"
        # Strategy 4: Last resort - npm install
        else
          echo "‚ö†Ô∏è  Trying npm install as last resort..."
          rm -f package-lock.json
          npm install --no-audit --no-fund
          echo "‚úÖ npm install completed"
        fi

    - name: TypeScript type check
      run: |
        echo "üîß Running TypeScript type check..."
        npx tsc --noEmit --skipLibCheck

    - name: Code quality check
      run: |
        echo "üîç Running code quality checks..."
        
        # Try Biome, fallback to basic checks
        if npx @biomejs/biome --version >/dev/null 2>&1; then
          echo "‚úÖ Using Biome for quality checks"
          npx @biomejs/biome check . --reporter=compact
          npx @biomejs/biome format . --check
        else
          echo "‚ö†Ô∏è  Biome not available, running basic TypeScript check"
          npx tsc --noEmit --pretty
        fi

    - name: Build verification
      env:
        NEXT_PUBLIC_SUPABASE_URL: "https://mock.supabase.co"
        NEXT_PUBLIC_SUPABASE_ANON_KEY: "mock_anon_key"
        NEXT_TELEMETRY_DISABLED: "1"
      run: |
        echo "üèóÔ∏è Verifying build..."
        npm run build